# Rime schema
# encoding: utf-8

# === 初始化 ===
set_shuru_schema:                         # 配置输入方案
  __include: wanxiang.yaml:/algebra_zrm   # 可选解码规则有： algebra_py, algebra_zrm, algebra_flypy
set_algebra_fuzhu:                        # 配置此项就是选择什么辅助码
  __include: wanxiang.yaml:/fuzhu_moqi    # 可选辅助码有：fuzhu_kong，fuzhu_moqi, fuzhu_zrm, fuzhu_flypy, fuzhu_tiger, fuzhu_wubi, fuzhu_hanxin
pro_comment_format:
  __include: wanxiang.yaml:/pro_comment_format 
  fuzhu_type: moqi


# === 描述档 ===
schema:
  schema_id: zrm_rime_jk
  name: 知心自然
  author:
    - 发明人 gaboolic
    - 撰写者 Jack Liu <loveminimal@163.com>
  description: |
    - 知心自然，双拼·辅助码，小啊小自然
    - https://github.com/loveminimal/rime-jk
    - 辅助码方案源自万象拼音 https://github.com/amzxyz/rime_wanxiang_pro
  dependencies:
    - pinyin_simp
  version: 3.0.0                         # 版本号，在发布新版前请确保已升级版本号
  icon: "assets/bi_e.ico"
  ascii_icon: 'assets/ascii.ico'


# === 开关 ===
switches:
  - name: ascii_mode                     # 中英文转换开关，0-中文  1-英文
    reset: 0 
    states: [ 中文, 西文 ]
  - name: full_shape                     # 半角/全角转换，0-半角 1-全角
    states: [半角, 全角]
  - name: emoji
    reset: 1
    states: [ 💀, 😄 ]
  - name: chaifen
    reset: 0
    states: [ 拆隐, 拆显 ]


# === 引擎 ===
engine:
  # --- 处理各类按键消息 ---
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor

  # --- 识别不同内容类型，将输入码分段并加上 tag ---
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor

  # --- 翻译特定类型的编码段为一组候选文字 ---
  translators:
    - punct_translator
    - table_translator@custom_phrase     # 1、2码置顶
    - script_translator
    - reverse_lookup_translator
    - lua_translator@*date_translator    # 时间、日期、星期
    - lua_translator@*force_gc           # 暴力 GC 降低内存
    
  # --- 过滤翻译的结果，自定义滤镜皆可使用开关调控 ---
  filters:
    # lua的filter：
    - lua_filter@*pro_comment_format     # 超级注释模块
    - lua_filter@*is_in_user_dict        # 用户词典的词加上一个*
    # 反查的filter
    - simplifier                         # 用字转换，？默认繁转简
    - simplifier@emoji                   # Emoji
    - uniquifier
    - simplifier@chaifen


# === speller ===
speller:
  max_code_length: 5
  # table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
  auto_select: false
  auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}|;[a-z]
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA[/|
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  delimiter: " '"
  # speller 未允许 aj 表示 an
  algebra:
    __patch:
      - set_shuru_schema                 #拼音转双拼码
      - set_algebra_fuzhu                #辅助码部分

    # --- 飞键 可选择性开启 ---
    # - derive/^([y])j/$1f/
    # - derive/^qx/qw/
    # - derive/^xq/xo/
    # - derive/^qq/qo/
    # - derive/^ww/wi/
    # # - derive/^y([a-df-qs-z])/e$1/ # y -> e互击
    # - derive/^j([a-twyz])/f$1/ # j -> f互击
    # # - derive/^jn/jv/
    # # - derive/^mn/mv/
    # # - derive/^jm/jz/
    # - derive/^([y])h/$1g/
    # # - derive/^([rgv])f/$1m/
    # - derive/^([rsgv])c/$1n/

# === segmentor ===
abc_segmentor:
  extra_tags:                            # 为此 segmentor 所标记的段落插上其它 tag
    - reverse_lookup

translator:
  dictionary: wanxiang
  prism: zrm_rime_jk                     # prism 要以本输入方案的名称来命名，以免把 wubi86 的拼写映射覆盖掉
  # initial_quality: 10000
  # 是否自动补全（预测），酌情开启。
  # ... 开启之后，打 ilqmmkyt 的时候，二选会是"床前明月光",
  # ... 但是影响3码简码，例如 idz 首选会变成"拆字"而非"扯犊子"
  enable_completion: false
  # 默认为不超过 2 个字的候选项显示输入码；
  # ... 将 2 改为 0 可关闭编码提示，
  # ... 改为 1 则是只显示单字的输入码，依此类推
  spelling_hints: 1
  # enable_sentence: true                # 是否开启自动造句
  enable_user_dict: true                 # 是否开启用户词典（用户词典记录动态字词频、用户词）
  enable_encoder: true                   # 是否开启自动造词
  comment_format: {comment}              # 将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置
  # comment_format:
    # - xform/(^|[ '])[^[]+[[]/$1/       # 编码提示只显示辅助码部分
    # - xform/(\w\w)[[](\w\w)/$1-$2/
    # - xform/(\w\w)[[](\w\w)/$2/
    # - xform/(\w\w)\[(\w\w)/$1-$2/
  # preedit_format:                      # 将其直接修改为 comment_format ，就可以输什么显示什么
  # # comment_format:
  #   - xform/([bpmfdtnljqx])n/$1iao/
  #   - xform/(\w)g/$1eng/
  #   - xform/(\w)q/$1iu/
  #   - xform/(\w)w/$1ei/
  #   - xform/([dtnlgkhjqxyvuirzcs])r/$1uan/
  #   - xform/(\w)t/$1ve/
  #   - xform/(\w)y/$1un/
  #   - xform/([dtnlgkhvuirzcs])o/$1uo/
  #   - xform/(\w)p/$1ie/
  #   - xform/([jqx])s/$1iong/
  #   - xform/(\w)s/$1ong/
  #   - xform/(\w)d/$1ai/
  #   - xform/(\w)f/$1en/
  #   - xform/(\w)h/$1ang/
  #   - xform/(\w)j/$1an/
  #   - xform/([gkhvuirzcs])k/$1uai/
  #   - xform/(\w)k/$1ing/
  #   - xform/([jqxnl])l/$1iang/
  #   - xform/(\w)l/$1uang/
  #   - xform/(\w)z/$1ou/
  #   - xform/([gkhvuirzcs])x/$1ua/
  #   - xform/(\w)x/$1ia/
  #   - xform/(\w)c/$1ao/
  #   - xform/([dtgkhvuirzcs])v/$1ui/
  #   - xform/(\w)b/$1in/
  #   - xform/(\w)m/$1ian/
  #   - xform/([aoe])\1(\w)/$1$2/
  #   - "xform/(^|[ '])v/$1zh/"
  #   - "xform/(^|[ '])i/$1ch/"
  #   - "xform/(^|[ '])u/$1sh/"
  #   - xform/([jqxy])v/$1u/
  #   - xform/([nl])v/$1ü/

# === Lua 配置: 日期时间(整合版)的触发关键字 ===
date_translator:
  jk_datetime: iii


reverse_lookup:
  dictionary: pinyin_simp
  prefix: "`"
  suffix: "'"
  tips: 〔拼音〕
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/


# === 自定义短语：custom_phrase.txt ===
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase               # 可以修改这里，改成自己的 txt 文件
  db_class: stabledb                     # 只读数据库，无法动态调频；设为 tabledb 可以动态调频
  enable_completion: false               # 补全提示
  enable_sentence: false                 # 禁止造句
  initial_quality: 99                    # custom_phrase 的权重应该比 pinyin 和 melt_eng 大


# === Emoji ===
emoji:
  option_name: emoji
  opencc_config: emoji.json
  inherit_comment: false                 # 在 corrector.lua 及反查中，emoji 返回空注释


# 显示墨奇码拆分
chaifen:
  option_name: chaifen
  opencc_config: zrm_cf.json
  tips: char
  show_in_comment: true
  comment_format:
    - "xform/	/ /"


# === 标点符号控制 ===
punctuator:
  import_preset: default                 # 设定符号表，这里直接导入预设的


# === 键位绑定 ===
key_binder:
  import_preset: default
  # 迁移至 default.custom.yaml ，以方便多方案共享


# === 下设 patterns ，配合 segmentor 的 prefix 和 suffix 完成段落划分、tag 分配 ===
recognizer:
  patterns:
    import_preset: default
    reverse_lookup: "`[a-z]*'?$"


