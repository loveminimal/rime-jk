# Rime schema settings
# encoding: utf-8

# === 描述档 ===
schema:
  schema_id: jk_wubi
  name: 五笔·知心
  author: 
    - 修改者 Jack Liu <https://aituyaa.com>
  description: |
    - 知心五笔，五笔·拼音混输，小啊小女仆
    - https://github.com/loveminimal/rime-jk
    - 参考 »
    - https://github.com/rime/rime-wubi
    - https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md
  dependencies:
    - jk_ascii
    - jk_pinyin
  icon: 'assets/jk.ico'
  ascii_icon: 'assets/ascii.ico'
  version: 6.2.0


# === 初始化 ===
# --- 超级注释 ---
pro_comment_format:
  fuzhu_code: true                       # 启用辅助码提醒
  candidate_length: 0                    # 候选词辅助码提醒的生效长度，0 为关闭
  fuzhu_type: wubi                       # 用于匹配对应的辅助码注释显示


# === 候选 ===
# menu:
#   page_size: 10


# === 开关 ===
# reset: ← 0 1 →
switches:
  __include: jk.yaml:/switches


# === 引擎 ===
engine:
  # --- 处理各类按键消息 ---
  processors:
    - ascii_composer                     # 处理西文模式及中西文切换
    - chord_composer
    - key_binder                         # 在特定条件下将按键绑定到其他按键，放在其他 processor 之前判定……
    - recognizer                         # 与 matcher 搭配，处理符合特定规则的输入码，如网址、反查等 tags
    - speller                            # 拼写处理器，把字母追加到编码串
    - punctuator                         # 句读处理器（处理符号按键），将单个字符按键直接映射为标点符号或文字
    - selector                           # 选字处理器，选字、换页
    - navigator                          # 移动插入点，即处理栏内的光标移动
    - express_editor                     # 编辑器，处理空格、回车上屏、回退键。空格确认当前输入、其他字符直接上屏

  # --- 识别不同内容类型，将输入码分段并加上 tag ---
  segmentors:                            #
    - ascii_segmentor                    # 标识西方段落字母直接上屏
    - matcher                            # 配合 recognizer 标签符合特定规则的段落，如网址、反查等，加上选定 tag
    - abc_segmentor                      # 标识常规的文字段落，加上 abc 这个 tag
    - affix_segmentor@pinyin
    - punct_segmentor                    # 标识句读段落，键入标点符号用，加上 punct 这个 tag 
    - fallback_segmentor                 # 标识其他未标识的段落
    # - affix_segmentor                  # 用户自定义 tag - 此项可加载多个实例，后接 @+tag名
    # - lua_segmentor                    # 使用 lua 自定义切分，后接 @+lua 函数名
    
  # --- 翻译特定类型的编码段为一组候选文字 ---
  translators:
    # - echo_translator                  # 没有其他候选字时，回显输入码，创建一个与编码串相同的修行项
    - punct_translator                   # 配合 punct_segmentor 进行符号转换
    - table_translator                   # 码表翻译器，用于仓颉、五笔等基于码表的输入方案，
                                         # ... 此项可以加载多个实例，后接 @+翻译器名 (如 cangjie、wubi 等)
    - table_translator@custom_phrase     # 自定义短语 custom_phrase.txt
    - script_translator@pinyin
    - reverse_lookup_translator          # 反查翻译器，用另一种编码方案查码
    - lua_translator@*date_translator    # 时间、日期、星期
    - lua_translator@*force_gc           # 暴力 GC 降低内存
  
  # --- 过滤翻译的结果，自定义滤镜皆可使用开关调控 ---
  filters:
    # lua 的 filter：
    - lua_filter@*put_definition_into_comment
    # - lua_filter@*keep_one_level_simplified_code
    - lua_filter@*is_in_user_dict        # 用户词典的词加上一个*
    # 反查的 filter
    - simplifier                         # 用字转换，？默认繁转简
    - simplifier@emoji                   # Emoji
    - simplifier@zh2en
    - uniquifier                         # 过滤重复的候选字，有可能来自 simplifier
    - simplifier@chaifen                 # 五笔的拆分滤镜


# === speller ===
speller:
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA~
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`
  delimiter: " z"                        # 第一位<空格>是拼音之间的分隔符；第二位 <z> 表示可以手动输入 z 来分割拼音
  # max_code_length: 4                   # 形码最大码长，超过则顶字上屏，四码顶字上屏


chord_composer:
  __include: jk.yaml:/chord_composer
    

# === segmentor ===
# abc_segmentor:
#   extra_tags:                            # 为此 segmentor 所标记的段落插上其它 tag
#     - reverse_lookup


# === 每个方案都有一个主 translator ===
translator:
  dictionary: jk_wubi                    # 与 wubi86 共用词典，设定 table_translator 使用的词典名
  prism: jk_wubi                         # prism 要以本输入方案的名称来命名，以免把 wubi86 的拼写映射覆盖掉
  enable_completion: false
  enable_charset_filter: true            # 是否开启字符集过滤
  encode_commit_history: true            # 是否对已上屏词自动成词
  max_phrase_length: 4                   # 最大自动成词词长
  disable_user_dict_for_patterns:        # 禁止某些编码录入用户词典
    - "^z.*$"
  enable_sentence: true                  # 是否开启自动造句
  enable_user_dict: true                 # 是否开启用户词典（用户词典记录动态字词频、用户词）
  enable_encoder: true                   # 是否开启自动造词
  comment_format: {comment}              # 将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置


# === Lua 配置: 日期时间(整合版)的触发关键字 ===
date_translator:
  jk_datetime: iii


# === 反查 ===
# reverse_lookup:
#   dictionary: jk_flypy
#   # prefix: "`"
#   prefix: "%"
#   suffix: "'"
#   tips: 〔小鹤·反查〕
#   preedit_format:
#     - xform/([nl])v/$1ü/
#     - xform/([nl])ue/$1üe/
#     - xform/([jqxy])v/$1u/
reverse_lookup:
  __include: jk.yaml:/reverse_lookup

# === 自定义短语：custom_phrase.txt ===
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb                     # 只读数据库，无法动态调频；设为 tabledb 可以动态调频
  enable_completion: false               # 补全提示
  enable_sentence: false                 # 禁止造句
  initial_quality: 99                    # custom_phrase 的权重应该比 pinyin 和 melt_eng 大


# === Emoji ===
emoji:
  option_name: emoji
  opencc_config: emoji.json
  inherit_comment: false

zh2en:
  option_name: zh2en
  opencc_config: zh2en.json
  inherit_comment: false


# === 五笔拆分滤镜 ===
chaifen:
  opencc_config: wb_cf.json
  option_name: chaifen
  show_in_comment: true 
  comment_format:     
    - "xform/-/ /"
    # - "xform/&nbsp;/ /"
  tags:     
    - abc
    # - wubi86
    # - reverse_lookup
    - pinyin
  # char←字 词→all
  tips: all                              

pinyin:
  tag: pinyin
  dictionary: jk_pinyin
  prefix: " "
  suffix: "'"
  tips: 〔拼音·反查〕
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/


# === 标点符号控制 ===
punctuator:
  import_preset: default
  symbols:
    __include: symbols_z:/symbols          # 从 symbols_z.yaml 导入配置


# === 键位绑定 ===
key_binder:
  import_preset: default


# === 下设 patterns ，配合 segmentor 的 prefix 和 suffix 完成段落划分、tag 分配 ===
recognizer:
  # import_preset: default
  patterns:
    # reverse_lookup: "`[a-z]*'?$"
    reverse_lookup: "^~[a-z]*:?$"
    punct: "^~~([0-9]|10|[A-Za-z]+)$"     # 响应 symbols_v.yaml 的 symbols，用 'z' 替换 '/'
    # pinyin: "^P[A-Za-z]*$"
    pinyin: "^[Xa-z]*$"                   # 取消引导词，直接五笔拼音混输（用任意大写字母隔开，防止反查混入）
