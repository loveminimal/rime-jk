# Rime schema settings
# encoding: utf-8

# === 初始化 ===
set_shuru_schema: 
  __include: jk.yaml:/algebra_py
set_algebra_fuzhu:
  __include: jk.yaml:/fuzhu_flypy
pro_comment_format:
  __include: jk.yaml:/pro_comment_format 
  fuzhu_type: flypy


# === 描述档 ===
schema:
  schema_id: jk_pinyin 
  name: 全拼·知心
  author: 
    - 发明人 朙月拼音 佛振 <chen.sst@gmail.com>
    - 撰写者 Jack Liu <loveminimal@163.com>
  description: |
    - 知心拼音，全拼，小啊小青柠
    - https://github.com/loveminimal/rime-jk
    - 辅助码方案源自万象拼音 https://github.com/amzxyz/rime_wanxiang_pro
  dependencies:
    - stroke
  version: 6.1.0
  icon: "assets/pr.ico"
  ascii_icon: 'assets/ascii.ico'


# === 开关 ===
switches:
  __include: jk:/switches


# === 引擎 ===
engine:
  # --- 处理各类按键消息 ---
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor

  # --- 识别不同内容类型，将输入码分段并加上 tag ---
  segmentors: 
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
    
  # --- 翻译特定类型的编码段为一组候选文字 ---
  translators:
    - punct_translator
    - table_translator@custom_phrase
    - script_translator
    - reverse_lookup_translator
    - lua_translator@*date_translator
    - lua_translator@*force_gc
  
  # --- 过滤翻译的结果，自定义滤镜皆可使用开关调控 ---
  filters:
    # lua的filter：
    - lua_filter@*pro_comment_format
    - lua_filter@*is_in_user_dict
    # 反查的filter
    - simplifier
    - simplifier@emoji
    - uniquifier
    - simplifier@chaifen


# === speller ===
speller:
  max_code_length: 5
  # table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
  auto_select: false
  auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}|;[a-z]
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA[/|
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  delimiter: " '"
  # speller 未允许 aj 表示 an
  algebra:
    __patch:
      - set_shuru_schema                 # 拼音转双拼码
      - set_algebra_fuzhu                # 辅助码部分


# === segmentor ===
abc_segmentor:
  extra_tags:                            # 为此 segmentor 所标记的段落插上其它 tag
    - reverse_lookup


# === 每个方案都有一个主 translator ===
translator:
  dictionary: py
  prism: jk_pinyin
  # initial_quality: 10000
  # 是否自动补全（预测），酌情开启。
  # ... 开启之后，打 ilqmmkyt 的时候，二选会是"床前明月光",
  # ... 但是影响3码简码，例如 idz 首选会变成"拆字"而非"扯犊子"
  enable_completion: false
  # 默认为不超过 2 个字的候选项显示输入码；
  # ... 将 2 改为 0 可关闭编码提示，
  # ... 改为 1 则是只显示单字的输入码，依此类推
  spelling_hints: 1
  enable_sentence: false                 # 是否开启自动造句
  enable_user_dict: true                 # 是否开启用户词典（用户词典记录动态字词频、用户词）
  enable_encoder: true                   # 是否开启自动造词
  comment_format: {comment}              # 将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置
  

# === Lua 配置: 日期时间(整合版)的触发关键字 ===
date_translator:
  jk_datetime: iii


reverse_lookup:
  dictionary: stroke
  enable_completion: true
  prefix: "`"
  suffix: "'"
  tips: 〔笔画〕
  preedit_format:
    - xlit/hspnz/一丨丿丶乙/
  # comment_format:
  #   - xform/([nl])v/$1ü/


# === 自定义短语：custom_phrase.txt ===
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase               # 可以修改这里，改成自己的 txt 文件
  db_class: stabledb                     # 只读数据库，无法动态调频；设为 tabledb 可以动态调频
  enable_completion: false               # 补全提示
  enable_sentence: false                 # 禁止造句
  initial_quality: 99                    # custom_phrase 的权重应该比 pinyin 和 melt_eng 大


emoji:
  option_name: emoji
  opencc_config: emoji.json
  inherit_comment: false                 # 在 corrector.lua 及反查中，emoji 返回空注释


chaifen:
  option_name: chaifen
  opencc_config: flyyx_cf.json
  tips: char
  show_in_comment: true
  comment_format:
    - "xform/	/ /"


# === 标点符号控制 ===
punctuator:
  import_preset: default
  symbols:
    __include: symbols_z:/symbols        # 从 symbols_z.yaml 导入配置


# === 键位绑定 ===
key_binder:
  import_preset: default


# === 下设 patterns ，配合 segmentor 的 prefix 和 suffix 完成段落划分、tag 分配 ===
recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*'?$"
    punct: "^z([0-9]|10|[A-Za-z]+)$"     # 响应 symbols_v.yaml 的 symbols，用 'z' 替换 '/'


# === 启用语言模型 ===
octagram:
  __include: jk.yaml:/octagram